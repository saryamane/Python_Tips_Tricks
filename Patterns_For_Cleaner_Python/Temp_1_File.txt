inc_final_quarterly_asp_skinny_query = """
CREATE TABLE inc_final_quarterly_asp_new AS
  (SELECT
  a.qtr_join_id                                                 AS qtr_id,
  To_number(a.fiscal_yr_qtr_num)                                AS fiscal_yr_qtr_num,
  To_number(Substr(a.fiscal_yr_qtr_num, 1, 4))                  AS fiscal_yr,
  To_number(Substr(a.fiscal_yr_qtr_num, 5, 1))                  AS fiscal_qtr,
  a.account_id,
  a.pricebook_name,
  a.product_sku,
    a.exit_quantity,
  decode(sign(a.exit_quantity), -1, 0, a.exit_quantity) - decode(sign(Lag(a.exit_quantity, 1, 0)
                              over (
                                PARTITION BY a.account_id, a.product_sku,
                              a.pricebook_name, a.is_rul_flag,
                              a.billing_frequency, a.currency_code
                                ORDER BY a.qtr_join_id)), -1, 0, Lag(a.exit_quantity, 1, 0)
                              over (
                                PARTITION BY a.account_id, a.product_sku,
                              a.pricebook_name, a.is_rul_flag,
                              a.billing_frequency, a.currency_code
                                ORDER BY a.qtr_join_id)) AS delta_exit_quantity,
          a.exit_total_price,
          decode(sign(a.exit_total_price), -1, 0, a.exit_total_price) - decode(sign(Lag(a.exit_total_price, 1, 0)
                                 over (
                                   PARTITION BY a.account_id, a.product_sku,
                                 a.pricebook_name, a.is_rul_flag,
                                 a.billing_frequency, a.currency_code
                                   ORDER BY a.qtr_join_id)), -1, 0, Lag(a.exit_total_price, 1, 0)
                                 over (
                                   PARTITION BY a.account_id, a.product_sku,
                                 a.pricebook_name, a.is_rul_flag,
                                 a.billing_frequency, a.currency_code
                                   ORDER BY a.qtr_join_id)) AS delta_exit_total_price,
          a.exit_total_price_usd,
          decode(sign(a.exit_total_price_usd), -1, 0, a.exit_total_price_usd) - decode(sign(Lag(a.exit_total_price_usd, 1, 0)
                                     over (
                                       PARTITION BY a.account_id, a.product_sku,
                                     a.pricebook_name, a.is_rul_flag,
                                     a.billing_frequency, a.currency_code
                                       ORDER BY a.qtr_join_id)), -1, 0, Lag(a.exit_total_price_usd, 1, 0)
                                     over (
                                       PARTITION BY a.account_id, a.product_sku,
                                     a.pricebook_name, a.is_rul_flag,
                                     a.billing_frequency, a.currency_code
                                       ORDER BY a.qtr_join_id)) AS delta_exit_total_price_usd,
          a.exit_total_annual_price_local,
          decode(sign(a.exit_total_annual_price_local), -1, 0, a.exit_total_annual_price_local) - decode(sign(Lag(a.exit_total_annual_price_local,
                                            1
                                            , 0)
          over (
            PARTITION BY a.account_id, a.product_sku,
          a.pricebook_name, a.is_rul_flag,
          a.billing_frequency, a.currency_code
            ORDER BY a.qtr_join_id)), -1, 0, Lag(a.exit_total_annual_price_local,
                                            1
                                            , 0)
          over (
            PARTITION BY a.account_id, a.product_sku,
          a.pricebook_name, a.is_rul_flag,
          a.billing_frequency, a.currency_code
            ORDER BY a.qtr_join_id)) AS del_exit_total_annual_local,
          a.exit_total_annual_price_usd,
          decode(sign(a.exit_total_annual_price_usd), -1, 0, a.exit_total_annual_price_usd) - decode(sign(Lag(a.exit_total_annual_price_usd, 1,
                                          0)
          over (
            PARTITION BY a.account_id, a.product_sku,
          a.pricebook_name, a.is_rul_flag,
          a.billing_frequency, a.currency_code
            ORDER BY a.qtr_join_id)), -1, 0, Lag(a.exit_total_annual_price_usd, 1,
                                          0)
          over (
            PARTITION BY a.account_id, a.product_sku,
          a.pricebook_name, a.is_rul_flag,
          a.billing_frequency, a.currency_code
            ORDER BY a.qtr_join_id)) AS del_exit_total_annual_usd,
          a.exit_asp                                                      AS
  WAAUP_Quarterly_Local,
          a.exit_asp_usd                                                  AS
  WAAUP_Quarterly_USD,
          a.exit_asp * ( 12.0 / a.billing_frequency )                     AS
  WAAUP_Annual_Local,
          a.exit_asp_usd * ( 12.0 / a.billing_frequency )                 AS
  WAAUP_Annual_USD,
          a.exit_asp * ( decode(sign(a.exit_quantity), -1, 0, a.exit_quantity) - decode(sign(Lag(a.exit_quantity, 1, 0)
                              over (
                                PARTITION BY a.account_id, a.product_sku,
                              a.pricebook_name, a.is_rul_flag,
                              a.billing_frequency, a.currency_code
                                ORDER BY a.qtr_join_id)), -1, 0, Lag(a.exit_quantity, 1, 0)
                              over (
                                PARTITION BY a.account_id, a.product_sku,
                              a.pricebook_name, a.is_rul_flag,
                              a.billing_frequency, a.currency_code
                                ORDER BY a.qtr_join_id)) ) *
          ( 12.0 / a.billing_frequency )                                  AS
  Delta_WAAUP_Annual_Local,
          a.exit_asp_usd * ( decode(sign(a.exit_quantity), -1, 0, a.exit_quantity) - decode(sign(Lag(a.exit_quantity, 1, 0)
                              over (
                                PARTITION BY a.account_id, a.product_sku,
                              a.pricebook_name, a.is_rul_flag,
                              a.billing_frequency, a.currency_code
                                ORDER BY a.qtr_join_id)), -1, 0, Lag(a.exit_quantity, 1, 0)
                              over (
                                PARTITION BY a.account_id, a.product_sku,
                              a.pricebook_name, a.is_rul_flag,
                              a.billing_frequency, a.currency_code
                                ORDER BY a.qtr_join_id)) ) * (
          12.0 /
          a.billing_frequency )                                           AS
  Delta_WAAUP_Annual_USD,
          CASE
            WHEN b.eaio_annual_local_price IS NULL THEN 0
            ELSE b.eaio_annual_local_price
          END                                                             AS
  EAIO_Annual_Local_Price,
          CASE
            WHEN b.eaio_annual_usd_price IS NULL THEN 0
            ELSE b.eaio_annual_usd_price
          END                                                             AS
  EAIO_Annual_USD_Price,
          ( CASE
              WHEN b.eaio_annual_local_price IS NULL THEN 0
              ELSE b.eaio_annual_local_price
            END ) * ( decode(sign(a.exit_quantity), -1, 0, a.exit_quantity) - decode(sign(Lag(a.exit_quantity, 1, 0)
                              over (
                                PARTITION BY a.account_id, a.product_sku,
                              a.pricebook_name, a.is_rul_flag,
                              a.billing_frequency, a.currency_code
                                ORDER BY a.qtr_join_id)), -1, 0, Lag(a.exit_quantity, 1, 0)
                              over (
                                PARTITION BY a.account_id, a.product_sku,
                              a.pricebook_name, a.is_rul_flag,
                              a.billing_frequency, a.currency_code
                                ORDER BY a.qtr_join_id)) )   AS
          RIV_Annual_Local,
          ( CASE
              WHEN b.eaio_annual_usd_price IS NULL THEN 0
              ELSE b.eaio_annual_usd_price
            END ) * ( decode(sign(a.exit_quantity), -1, 0, a.exit_quantity) - decode(sign(Lag(a.exit_quantity, 1, 0)
                              over (
                                PARTITION BY a.account_id, a.product_sku,
                              a.pricebook_name, a.is_rul_flag,
                              a.billing_frequency, a.currency_code
                                ORDER BY a.qtr_join_id)), -1, 0, Lag(a.exit_quantity, 1, 0)
                              over (
                                PARTITION BY a.account_id, a.product_sku,
                              a.pricebook_name, a.is_rul_flag,
                              a.billing_frequency, a.currency_code
                                ORDER BY a.qtr_join_id)) )   AS
  RIV_Annual_USD,
          a.currency_code,
          a.billing_frequency,
          a.is_rul_flag,
          case when lag(a.exit_quantity,1,-9999)  over (partition by a.account_id, a.product_sku, a.pricebook_name order by a.qtr_join_id) = -9999 then 'New Product' else 'Existing Product' end as New_vs_Existing_Product,
case when lag(a.exit_quantity,1,-9999)  over (partition by a.account_id order by a.qtr_join_id) = -9999 then 'New Customer' else 'Existing Customer' end as New_vs_Existing_Customer
   FROM   (SELECT qtr_join_id,
                  fiscal_yr_qtr_num,
                  account_id,
                  pricebook_name,
                  product_sku,
                  SUM(exit_quantity)                 AS Exit_Quantity,
                  SUM(exit_total_price)              AS Exit_Total_Price,
                  SUM(exit_total_price_usd)          AS Exit_Total_Price_USD,
                  SUM(exit_total_annual_price_local) AS
                  Exit_Total_Annual_Price_Local,
                  SUM(exit_total_annual_price_usd)   AS
                  Exit_Total_Annual_Price_USD,
                  CASE
                    WHEN SUM(exit_quantity) <> 0 THEN
                    SUM(exit_total_price) / SUM(exit_quantity)
                    ELSE 0
                  END                                AS Exit_ASP,
                  CASE
                    WHEN SUM(exit_quantity) <> 0 THEN
                    SUM(exit_total_price_usd) / SUM(exit_quantity)
                    ELSE 0
                  END                                AS Exit_ASP_USD,
                  currency_code,
                  billing_frequency,
                  is_rul_flag
           FROM   inc_qtr_snap_exit_amounts
           GROUP  BY qtr_join_id,
                     fiscal_yr_qtr_num,
                     account_id,
                     pricebook_name,
                     product_sku,
                     currency_code,
                     billing_frequency,
                     is_rul_flag
           ORDER  BY qtr_join_id ASC) a,
          (SELECT order_crtd_qtr_id,
                  account_id,
                  product_sku,
                  pricebook_name,
                  billing_frequency,
                  currency_code,
                  is_rul_flag,
                  CASE
                            WHEN To_char(order_create_date, 'MM') BETWEEN 2 AND
                                 4
                          THEN
  To_number(Concat(To_char(order_create_date, 'YYYY') + 1, '1'))
  WHEN To_char(order_create_date, 'MM') BETWEEN 5 AND 7 THEN
  To_number(Concat(To_char(order_create_date, 'YYYY') + 1, '2'))
  WHEN To_char(order_create_date, 'MM') BETWEEN 8 AND 10 THEN
  To_number(Concat(To_char(order_create_date, 'YYYY') + 1, '3'))
  WHEN To_char(order_create_date, 'MM') IN ( 11, 12 ) THEN
  To_number(Concat(To_char(order_create_date, 'YYYY') + 1, '4'))
  WHEN To_char(order_create_date, 'MM') IN ( 1 ) THEN
  To_number(Concat(
  To_char(order_create_date, 'YYYY'), '4'))
  END AS order_create_qtr,
                  CASE
                    WHEN SUM(exit_quantity) <> 0 THEN SUM(
                    exit_total_annual_price_local) /
                                                      SUM(
                                                      exit_quantity)
                    ELSE 0
                  END                                           AS
                  EAIO_Annual_Local_Price
                  ,
                  CASE
                    WHEN SUM(exit_quantity) <> 0 THEN SUM(
                    exit_total_annual_price_usd) /
                                                      SUM(
                                                      exit_quantity)
                    ELSE 0
                  END                                           AS
                  EAIO_Annual_USD_Price
           FROM   inc_qtr_exit_amount_calc
           GROUP  BY order_crtd_qtr_id,
                     account_id,
                     product_sku,
                     pricebook_name,
                     billing_frequency,
                     currency_code,
                     is_rul_flag,
                     CASE
                            WHEN To_char(order_create_date, 'MM') BETWEEN 2 AND
                                 4
                          THEN
  To_number(Concat(To_char(order_create_date, 'YYYY') + 1, '1'))
  WHEN To_char(order_create_date, 'MM') BETWEEN 5 AND 7 THEN
  To_number(Concat(To_char(order_create_date, 'YYYY') + 1, '2'))
  WHEN To_char(order_create_date, 'MM') BETWEEN 8 AND 10 THEN
  To_number(Concat(To_char(order_create_date, 'YYYY') + 1, '3'))
  WHEN To_char(order_create_date, 'MM') IN ( 11, 12 ) THEN
  To_number(Concat(To_char(order_create_date, 'YYYY') + 1, '4'))
  WHEN To_char(order_create_date, 'MM') IN ( 1 ) THEN
  To_number(Concat(
  To_char(order_create_date, 'YYYY'), '4'))
  END) b
   WHERE  a.product_sku = b.product_sku (+)
          AND a.account_id = b.account_id (+)
          AND a.pricebook_name = b.pricebook_name (+)
          AND a.billing_frequency = b.billing_frequency (+)
          AND to_number(a.fiscal_yr_qtr_num) = b.order_create_qtr (+)
          AND a.currency_code = b.currency_code (+)
          AND a.is_rul_flag = b.is_rul_flag (+)
          )
"""
